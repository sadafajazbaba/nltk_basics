# -*- coding: utf-8 -*-
"""Word2vec

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nn8lZMVrDON0YkSlTqDN_WcmHJXicaG5
"""

# importing the Dataset

import pandas as pd

messages = pd.read_csv('SMSSpamCollection.txt', sep='\t',
                           names=["label", "message"])

messages

messages.shape

messages['message'].loc[451]

#Data cleaning and preprocessing
import re
import nltk
nltk.download('stopwords')

from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

corpus = []
for i in range(0, len(messages)):
    review = re.sub('[^a-zA-Z]', ' ', messages['message'][i])
    review = review.lower()
    review = review.split()

    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]
    review = ' '.join(review)
    corpus.append(review)

corpus

# Creating the Bag of Words model
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=2500,binary=True)
X = cv.fit_transform(corpus).toarray()

X

X.shape

y=pd.get_dummies(messages['label'])
y=y.iloc[:,1].values

y

# Train Test Split

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

X_train,y_train

from sklearn.naive_bayes import MultinomialNB
spam_detect_model = MultinomialNB().fit(X_train, y_train)

#prediction
y_pred=spam_detect_model.predict(X_test)

from sklearn.metrics import accuracy_score,classification_report

score=accuracy_score(y_test,y_pred)
print(score)

from sklearn.metrics import classification_report
print(classification_report(y_pred,y_test))

# Creating the TFIDF model
from sklearn.feature_extraction.text import TfidfVectorizer
tv = TfidfVectorizer(max_features=2500)
X = tv.fit_transform(corpus).toarray()

# Creating the TFIDF model
from sklearn.feature_extraction.text import TfidfVectorizer
tv = TfidfVectorizer(max_features=2500)
X = tv.fit_transform(corpus).toarray()

# Creating the TFIDF model
from sklearn.feature_extraction.text import TfidfVectorizer
tv = TfidfVectorizer(max_features=2500)
X = tv.fit_transform(corpus).toarray()

from sklearn.naive_bayes import MultinomialNB
spam_detect_model = MultinomialNB().fit(X_train, y_train)

#prediction
y_pred=spam_detect_model.predict(X_test)

score=accuracy_score(y_test,y_pred)
print(score)

from sklearn.metrics import classification_report
print(classification_report(y_pred,y_test))

!pip install gensim

from sklearn.ensemble import RandomForestClassifier
classifier =RandomForestClassifier()
classifier.fit(X_train,y_train)

y_pred=classifier.predict(X_test)

accuracy_score(y_test,y_pred)

print(classification_report(y_pred,y_test))

!pip install gensim

import gensim.downloader as api

wv = api.load('word2vec-google-news-300')

vec_king = wv['king']

vec_king

from nltk.stem import WordNetLemmatizer
lemmatizer=WordNetLemmatizer()

import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

# Download required NLTK data
nltk.download('wordnet')
nltk.download('stopwords')

lemmatizer = WordNetLemmatizer()
corpus = []

for i in range(0, len(messages)):
    review = re.sub('[^a-zA-Z]', ' ', messages['message'][i])
    review = review.lower()
    review = review.split()

    review = [lemmatizer.lemmatize(word) for word in review if not word in stopwords.words('english')]
    review = ' '.join(review)
    corpus.append(review)

from nltk import sent_tokenize
from gensim.utils import simple_preprocess

corpus[0]

import nltk
from nltk.tokenize import sent_tokenize
from gensim.utils import simple_preprocess

# Download the 'punkt' tokenizer models
nltk.download('punkt')

words = []
for sent in corpus:
    sent_token = sent_tokenize(sent)
    for sentence in sent_token:
        words.append(simple_preprocess(sentence))

print(words)

words

import gensim

### Lets train Word2vec from scratch
model=gensim.models.Word2Vec(words,window=5,min_count=2)

model.wv.index_to_key

model.corpus_count

model.epochs

model.wv.similar_by_word('kid')

model.wv['kid'].shape

def avg_word2vec(doc):
    # remove out-of-vocabulary words
    #sent = [word for word in doc if word in model.wv.index_to_key]
    #print(sent)

    return np.mean([model.wv[word] for word in doc if word in model.wv.index_to_key],axis=0)
                #or [np.zeros(len(model.wv.index_to_key))], axis=0)